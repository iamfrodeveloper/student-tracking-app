name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      commit_sha: ${{ steps.check.outputs.commit_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'student-tracking-app/package-lock.json'

      - name: Install dependencies
        working-directory: ./student-tracking-app
        run: npm ci

      - name: Run quick tests
        working-directory: ./student-tracking-app
        run: npm run test:ci
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Build check
        working-directory: ./student-tracking-app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deployment decision
        id: check
        run: |
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          if [[ "${{ job.status }}" == "success" || "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Pre-deployment checks passed - proceeding with staging deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Pre-deployment checks failed - skipping deployment" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Deploy to Vercel Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'student-tracking-app/package-lock.json'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./student-tracking-app
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./student-tracking-app
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        id: deploy
        working-directory: ./student-tracking-app
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ needs.pre-deployment.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.preview_url }}',
              description: 'Staging deployment successful'
            });

  # Job 3: Post-deployment verification
  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-deployment, deploy-staging]
    if: needs.deploy-staging.result == 'success'
    
    steps:
      - name: Health check
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview_url }}"
          echo "## 🔍 Post-deployment Verification" >> $GITHUB_STEP_SUMMARY
          
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Health check
          if curl -f "$STAGING_URL/api/health" --max-time 30; then
            echo "✅ **Health check:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Health check:** FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Basic functionality check
          if curl -f "$STAGING_URL" --max-time 30 > /dev/null; then
            echo "✅ **Main page:** ACCESSIBLE" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Main page:** NOT ACCESSIBLE" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Performance check
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.preview_url }}"
          
          # Measure response times
          HEALTH_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$STAGING_URL/api/health" || echo "N/A")
          MAIN_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$STAGING_URL" || echo "N/A")
          
          echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Health endpoint:** ${HEALTH_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Main page:** ${MAIN_TIME}s" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging, post-deployment]
    if: always()
    
    steps:
      - name: Deployment summary
        run: |
          echo "## 📋 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ needs.pre-deployment.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "**Status:** ✅ DEPLOYED" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** ${{ needs.deploy-staging.outputs.preview_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.post-deployment.result }}" == "success" ]]; then
            echo "**Verification:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.post-deployment.result }}" == "failure" ]]; then
            echo "**Verification:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Verification:** ⏭️ SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && needs.deploy-staging.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy-staging.outputs.preview_url }}';
            const comment = `## 🚀 Staging Deployment
            
            Your changes have been deployed to staging!
            
            **🔗 Preview URL:** ${deploymentUrl}
            **📝 Commit:** ${{ needs.pre-deployment.outputs.commit_sha }}
            **✅ Status:** Deployed successfully
            
            ### Quick Links
            - [🏠 Application](${deploymentUrl})
            - [🔍 Health Check](${deploymentUrl}/api/health)
            
            This deployment will be automatically updated when you push new commits to this PR.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
