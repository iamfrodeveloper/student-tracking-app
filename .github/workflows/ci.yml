name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-cache'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run ESLint
        working-directory: .
        run: npm run lint

      - name: Run TypeScript type checking
        working-directory: .
        run: npm run type-check

      - name: Check code formatting
        working-directory: .
        run: |
          if ! npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"; then
            echo "Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          fi

  # Job 2: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, components, api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        working-directory: .
        run: npm run test:${{ matrix.test-type }}
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            student-tracking-app/coverage/
            student-tracking-app/test-results/
          retention-days: 7

  # Job 3: Coverage Report
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run tests with coverage
        working-directory: .
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./student-tracking-app/coverage/lcov.info
          directory: ./student-tracking-app/coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage Summary
        working-directory: .
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "$(cat coverage/coverage-summary.json | jq -r '.total | "**Lines:** \(.lines.pct)% | **Statements:** \(.statements.pct)% | **Functions:** \(.functions.pct)% | **Branches:** \(.branches.pct)%"')" >> $GITHUB_STEP_SUMMARY

  # Job 4: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Build application
        working-directory: .
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        working-directory: .
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          echo "Build successful: .next directory created"
          ls -la .next/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

  # Job 5: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Run security audit
        working-directory: .
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        working-directory: .
        run: |
          npx better-npm-audit audit --level moderate || true

  # Job 6: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, coverage, build, security]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ **Overall Status:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi
