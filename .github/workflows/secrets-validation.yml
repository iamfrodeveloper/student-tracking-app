name: Secrets Validation

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - production
          - staging
          - development

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Validate GitHub Secrets
  validate-github-secrets:
    name: Validate GitHub Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          echo "## 🔐 GitHub Secrets Validation" >> $GITHUB_STEP_SUMMARY
          
          # Required secrets for CI/CD
          REQUIRED_SECRETS=(
            "VERCEL_TOKEN"
            "VERCEL_ORG_ID" 
            "VERCEL_PROJECT_ID"
            "NEON_DATABASE_URL"
            "QDRANT_URL"
            "QDRANT_API_KEY"
            "NEXTAUTH_SECRET"
          )
          
          # Optional secrets
          OPTIONAL_SECRETS=(
            "OPENAI_API_KEY"
            "GOOGLE_GEMINI_API_KEY"
            "CODECOV_TOKEN"
            "SENTRY_DSN"
            "CUSTOM_DOMAIN"
            "ALLOWED_ORIGINS"
          )
          
          MISSING_REQUIRED=()
          MISSING_OPTIONAL=()
          
          # Check required secrets
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_REQUIRED+=("$secret")
              echo "❌ **$secret**: Missing (Required)" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **$secret**: Configured" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check optional secrets
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Optional Secrets" >> $GITHUB_STEP_SUMMARY
          for secret in "${OPTIONAL_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_OPTIONAL+=("$secret")
              echo "⚠️ **$secret**: Not configured (Optional)" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **$secret**: Configured" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Required secrets missing**: ${#MISSING_REQUIRED[@]}" >> $GITHUB_STEP_SUMMARY
          echo "- **Optional secrets missing**: ${#MISSING_OPTIONAL[@]}" >> $GITHUB_STEP_SUMMARY
          
          if [ ${#MISSING_REQUIRED[@]} -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Validation failed**: Missing required secrets" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Validation passed**: All required secrets configured" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          CUSTOM_DOMAIN: ${{ secrets.CUSTOM_DOMAIN }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}

  # Job 2: Validate Secret Formats
  validate-secret-formats:
    name: Validate Secret Formats
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: validate-github-secrets
    
    steps:
      - name: Validate secret formats
        run: |
          echo "## 🔍 Secret Format Validation" >> $GITHUB_STEP_SUMMARY
          
          # Validate Vercel token format
          if [ ! -z "$VERCEL_TOKEN" ]; then
            if [[ $VERCEL_TOKEN =~ ^[A-Za-z0-9]{24}$ ]]; then
              echo "✅ **Vercel Token**: Valid format" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Vercel Token**: Invalid format" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Validate database URL format
          if [ ! -z "$NEON_DATABASE_URL" ]; then
            if [[ $NEON_DATABASE_URL =~ ^postgresql:// ]]; then
              echo "✅ **Neon Database URL**: Valid format" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Neon Database URL**: Invalid format" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Validate Qdrant URL format
          if [ ! -z "$QDRANT_URL" ]; then
            if [[ $QDRANT_URL =~ ^https:// ]]; then
              echo "✅ **Qdrant URL**: Valid format" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Qdrant URL**: Should use HTTPS" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Validate OpenAI API key format
          if [ ! -z "$OPENAI_API_KEY" ]; then
            if [[ $OPENAI_API_KEY =~ ^sk- ]]; then
              echo "✅ **OpenAI API Key**: Valid format" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **OpenAI API Key**: Unexpected format" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Validate Google Gemini API key format
          if [ ! -z "$GOOGLE_GEMINI_API_KEY" ]; then
            if [[ $GOOGLE_GEMINI_API_KEY =~ ^AIzaSy ]]; then
              echo "✅ **Google Gemini API Key**: Valid format" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Google Gemini API Key**: Unexpected format" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Validate NextAuth secret length
          if [ ! -z "$NEXTAUTH_SECRET" ]; then
            if [ ${#NEXTAUTH_SECRET} -ge 32 ]; then
              echo "✅ **NextAuth Secret**: Sufficient length" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **NextAuth Secret**: Too short (minimum 32 characters)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

  # Job 3: Test Secret Connectivity
  test-secret-connectivity:
    name: Test Secret Connectivity
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-secret-formats
    if: github.event.inputs.environment == 'all' || github.event.inputs.environment == 'production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        working-directory: .
        run: npm ci

      - name: Test database connectivity
        working-directory: .
        run: |
          echo "## 🔗 Connectivity Tests" >> $GITHUB_STEP_SUMMARY
          
          # Test database connections
          if npm run test:api -- --testNamePattern="database" --silent; then
            echo "✅ **Database connectivity**: Working" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Database connectivity**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
        continue-on-error: true

      - name: Test API connectivity
        working-directory: .
        run: |
          # Test API connections
          if npm run test:api -- --testNamePattern="api" --silent; then
            echo "✅ **API connectivity**: Working" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **API connectivity**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
        continue-on-error: true

  # Job 4: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: validate-github-secrets
    
    steps:
      - name: Security recommendations
        run: |
          echo "## 🛡️ Security Audit" >> $GITHUB_STEP_SUMMARY
          
          # Check for security best practices
          echo "### Security Checklist" >> $GITHUB_STEP_SUMMARY
          
          # Check if ALLOWED_ORIGINS is set for production
          if [ ! -z "$ALLOWED_ORIGINS" ]; then
            echo "✅ **CORS Origins**: Configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **CORS Origins**: Not configured - may cause security issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if SENTRY_DSN is set for monitoring
          if [ ! -z "$SENTRY_DSN" ]; then
            echo "✅ **Error Monitoring**: Configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Error Monitoring**: Consider setting up Sentry for production" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security recommendations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Rotate secrets every 90 days" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Monitor API usage for anomalies" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Use environment-specific secrets" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 Set up alerts for failed authentications" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Audit secret access regularly" >> $GITHUB_STEP_SUMMARY
        env:
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

  # Job 5: Generate Report
  generate-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [validate-github-secrets, validate-secret-formats, test-secret-connectivity, security-audit]
    if: always()
    
    steps:
      - name: Generate summary report
        run: |
          echo "## 📋 Secrets Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Secrets**: ${{ needs.validate-github-secrets.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Format Validation**: ${{ needs.validate-secret-formats.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Connectivity Tests**: ${{ needs.test-secret-connectivity.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.validate-github-secrets.result }}" == "success" && "${{ needs.validate-secret-formats.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Overall Status**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed validations above" >> $GITHUB_STEP_SUMMARY
          echo "- Update missing or invalid secrets" >> $GITHUB_STEP_SUMMARY
          echo "- Follow security recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Schedule next validation review" >> $GITHUB_STEP_SUMMARY
