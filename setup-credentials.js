#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');
const path = require('path');

console.log('🔧 Student Tracking App - Credentials Setup Wizard\n');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Helper function to ask questions
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// Helper function to ask for password (hidden input)
function askPassword(question) {
  return new Promise((resolve) => {
    process.stdout.write(question);
    process.stdin.setRawMode(true);
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    
    let password = '';
    
    process.stdin.on('data', function(char) {
      char = char + '';
      
      switch(char) {
        case '\n':
        case '\r':
        case '\u0004':
          process.stdin.setRawMode(false);
          process.stdin.pause();
          process.stdout.write('\n');
          resolve(password);
          break;
        case '\u0003':
          process.exit();
          break;
        case '\u007f': // Backspace
          if (password.length > 0) {
            password = password.slice(0, -1);
            process.stdout.write('\b \b');
          }
          break;
        default:
          password += char;
          process.stdout.write('*');
          break;
      }
    });
  });
}

async function setupCredentials() {
  console.log('This wizard will help you configure your API credentials for testing.\n');
  console.log('📝 You can skip any field by pressing Enter (will use placeholder values)\n');
  
  const credentials = {};
  
  // Database Configuration
  console.log('🗄️  DATABASE CONFIGURATION\n');
  
  credentials.neonConnectionString = await askQuestion(
    'Neon PostgreSQL Connection String\n' +
    '(Format: postgresql://username:password@host.neon.tech/database?sslmode=require)\n' +
    'Enter connection string: '
  );
  
  credentials.qdrantUrl = await askQuestion(
    '\nQdrant Vector Database URL\n' +
    '(Format: https://your-cluster.qdrant.io)\n' +
    'Enter Qdrant URL: '
  );
  
  credentials.qdrantApiKey = await askPassword(
    '\nQdrant API Key: '
  );
  
  // AI API Configuration
  console.log('\n🤖 AI API CONFIGURATION\n');
  
  credentials.googleGeminiApiKey = await askPassword(
    'Google Gemini API Key: '
  );
  
  credentials.openaiApiKey = await askPassword(
    '\nOpenAI API Key: '
  );
  
  // Application Configuration
  console.log('\n⚙️  APPLICATION CONFIGURATION\n');
  
  const useLocal = await askQuestion(
    'Test against local development server? (y/N): '
  );
  
  if (useLocal.toLowerCase() === 'y' || useLocal.toLowerCase() === 'yes') {
    credentials.appUrl = 'http://localhost:3000';
  } else {
    credentials.appUrl = 'https://student-tracking-app.vercel.app';
  }
  
  const headless = await askQuestion(
    'Run tests in headless mode (no browser UI)? (y/N): '
  );
  
  credentials.headless = headless.toLowerCase() === 'y' || headless.toLowerCase() === 'yes';
  
  // Generate the credentials file
  const credentialsTemplate = `// Test Credentials Configuration
// Generated by setup wizard on ${new Date().toISOString()}
// DO NOT COMMIT THIS FILE WITH REAL CREDENTIALS TO VERSION CONTROL

const TEST_CREDENTIALS = {
  // Database Configuration
  neonConnectionString: "${credentials.neonConnectionString || 'postgresql://username:password@host.neon.tech/database?sslmode=require'}",
  qdrantUrl: "${credentials.qdrantUrl || 'https://your-cluster.qdrant.io'}",
  qdrantApiKey: "${credentials.qdrantApiKey || 'your-qdrant-api-key-here'}",
  qdrantCollectionName: "student_tracking",
  
  // AI API Configuration
  googleGeminiApiKey: "${credentials.googleGeminiApiKey || 'your-google-gemini-api-key-here'}",
  googleGeminiModel: "gemini-1.5-flash",
  openaiApiKey: "${credentials.openaiApiKey || 'your-openai-api-key-here'}",
  openaiModel: "gpt-4",
  openaiWhisperModel: "whisper-1",
  
  // Application Configuration
  appUrl: "${credentials.appUrl}",
  localUrl: "http://localhost:3000",
  
  // Test configuration
  testTimeout: 30000,
  screenshotQuality: 90,
  headless: ${credentials.headless},
};

// Validation function
function validateCredentials() {
  const errors = [];
  
  if (TEST_CREDENTIALS.neonConnectionString.includes('username:password@host')) {
    errors.push('Neon connection string not configured');
  }
  
  if (TEST_CREDENTIALS.qdrantUrl.includes('your-cluster')) {
    errors.push('Qdrant URL not configured');
  }
  
  if (TEST_CREDENTIALS.qdrantApiKey.includes('your-qdrant-api-key')) {
    errors.push('Qdrant API key not configured');
  }
  
  if (TEST_CREDENTIALS.googleGeminiApiKey.includes('your-google-gemini-api-key')) {
    errors.push('Google Gemini API key not configured');
  }
  
  if (TEST_CREDENTIALS.openaiApiKey.includes('your-openai-api-key')) {
    errors.push('OpenAI API key not configured');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

function getTestCredentials() {
  const validation = validateCredentials();
  
  if (!validation.isValid) {
    console.warn('⚠️  Warning: Some credentials are not configured:');
    validation.errors.forEach(error => {
      console.warn(\`   - \${error}\`);
    });
    console.warn('   Tests may fail or use placeholder values.\\n');
  }
  
  return TEST_CREDENTIALS;
}

module.exports = {
  TEST_CREDENTIALS,
  validateCredentials,
  getTestCredentials
};`;

  // Write the credentials file
  const credentialsPath = path.join(__dirname, 'test-credentials.js');
  fs.writeFileSync(credentialsPath, credentialsTemplate);
  
  console.log('\n✅ Credentials configuration saved to test-credentials.js\n');
  
  // Show summary
  console.log('📋 Configuration Summary:');
  console.log(`   Database: ${credentials.neonConnectionString ? '✅ Configured' : '❌ Not configured'}`);
  console.log(`   Qdrant: ${credentials.qdrantUrl ? '✅ Configured' : '❌ Not configured'}`);
  console.log(`   Google Gemini: ${credentials.googleGeminiApiKey ? '✅ Configured' : '❌ Not configured'}`);
  console.log(`   OpenAI: ${credentials.openaiApiKey ? '✅ Configured' : '❌ Not configured'}`);
  console.log(`   Test URL: ${credentials.appUrl}`);
  console.log(`   Headless Mode: ${credentials.headless ? 'Yes' : 'No'}`);
  
  console.log('\n🚀 Ready to run tests!');
  console.log('   Run: node run-tests.js');
  console.log('   Or: node test-app-functionality.js');
  
  rl.close();
}

// Main execution
if (require.main === module) {
  setupCredentials().catch(error => {
    console.error('\n❌ Setup failed:', error.message);
    process.exit(1);
  });
}

module.exports = { setupCredentials };
